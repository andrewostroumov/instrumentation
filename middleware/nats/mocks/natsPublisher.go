// Code generated by mockery v2.15.0. DO NOT EDIT.

package natsmockery

import (
	context "context"

	nats "github.com/nats-io/nats.go"
	mock "github.com/stretchr/testify/mock"
)

// NatsPublisher is an autogenerated mock type for the natsPublisher type
type NatsPublisher struct {
	mock.Mock
}

// PublishMsg provides a mock function with given fields: m
func (_m *NatsPublisher) PublishMsg(m *nats.Msg) error {
	ret := _m.Called(m)

	var r0 error
	if rf, ok := ret.Get(0).(func(*nats.Msg) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RequestMsgWithContext provides a mock function with given fields: ctx, msg
func (_m *NatsPublisher) RequestMsgWithContext(ctx context.Context, msg *nats.Msg) (*nats.Msg, error) {
	ret := _m.Called(ctx, msg)

	var r0 *nats.Msg
	if rf, ok := ret.Get(0).(func(context.Context, *nats.Msg) *nats.Msg); ok {
		r0 = rf(ctx, msg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*nats.Msg)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *nats.Msg) error); ok {
		r1 = rf(ctx, msg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewNatsPublisher interface {
	mock.TestingT
	Cleanup(func())
}

// NewNatsPublisher creates a new instance of NatsPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewNatsPublisher(t mockConstructorTestingTNewNatsPublisher) *NatsPublisher {
	mock := &NatsPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
